// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  submissions        Submission[]
}

model Problem {
  id                 String              @id @default(cuid())
  title              String
  description        String
  hidden             Boolean             @default(true)
  slug               String              @unique
  solved             Int                 @default(0)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  difficulty         Difficulty          @default(MEDIUM)
  submissions        Submission[]
  defaultCode        DefaultCode[]
}

model DefaultCode {
  id         String   @id @default(cuid())
  languageId Int
  problemId  String
  code       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  problem    Problem  @relation(fields: [problemId], references: [id])
  language   Language @relation(fields: [languageId], references: [id])

  @@unique([problemId, languageId])
}

model Submission {
  id              String           @id @default(cuid())
  problemId       String
  userId          String
  code            String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime?        @updatedAt
  status          SubmissionResult @default(PENDING)
  memory          Int?
  time            Float?
  testcases       submissions[]
  user            User             @relation(fields: [userId], references: [id])
  problem         Problem          @relation(fields: [problemId], references: [id])
}

model Language {
  id          Int           @id @default(autoincrement())
  name        String
  judge0Id    Int           @unique
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  DefaultCode DefaultCode[]
}

model submissions {
  id                                         Int         @id @default(autoincrement())
  source_code                                String?
  language_id                                Int?
  stdin                                      String?
  expected_output                            String?
  stdout                                     String?
  status_id                                  Int?
  created_at                                 DateTime?   @db.Timestamp(6)
  finished_at                                DateTime?   @db.Timestamp(6)
  time                                       Decimal?    @db.Decimal
  memory                                     Int?
  stderr                                     String?
  token                                      String?     @unique @db.VarChar
  number_of_runs                             Int?
  message                                    String?
  Submission                                 Submission? @relation(fields: [submissionId], references: [id])
  submissionId                               String?

  @@index([token], map: "index_submissions_on_token")
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum SubmissionResult {
  AC
  REJECTED
  PENDING
}